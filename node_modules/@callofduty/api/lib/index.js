"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const deprecatedRequest = require("request");
const axios_1 = require("axios");
class default_1 {
    constructor(tokens = {}, logger = console.log) {
        this.tokens = tokens;
        this.logger = logger;
    }
    UseTokens({ sso, atkn, xsrf }) {
        this.tokens.sso = sso;
        this.tokens.atkn = atkn;
        this.tokens.xsrf = xsrf;
        return this;
    }
    Identity() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.AuthenticatedRequest({ url: `/crm/cod/v2/identities` });
        });
    }
    UserInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.ParsedAuthenticatedRequest({
                method: 'GET',
                url: `/userInfo/${this.tokens.sso}`,
                baseURL: 'https://profile.callofduty.com/cod'
            }, (r) => JSON.parse(r.replace(/^userInfo\((.*)\);?$/i, '$1')));
        });
    }
    Friends() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.AuthenticatedRequest({ url: `/codfriends/v1/compendium` });
        });
    }
    FriendAction(unoId, action) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.AuthenticatedRequest({ url: `/codfriends/v1/${action}/uno/id/${unoId}`, method: 'POST', data: JSON.stringify({}) });
        });
    }
    FriendProfiles(profileId, game, gameType) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.AuthenticatedRequest({ url: `stats/cod/v1/title/${game}/${this.PlayerUrl(profileId)}/profile/friends/type/${gameType}` });
        });
    }
    SearchVisibility(visibility, platform) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.AuthenticatedRequest({ url: `/setGamerPreference/${platform}/searchable/${visibility}`, method: 'POST', baseURL: 'https://profile.callofduty.com/cod' });
        });
    }
    ProfileVisibility(visibility, platform) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.AuthenticatedRequest({ url: `/setGamerPreference/${platform}/data_visible/${visibility}`, method: 'POST', baseURL: 'https://profile.callofduty.com/cod' });
        });
    }
    Accounts(profileId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.AuthenticatedRequest({ url: `/crm/cod/v2/accounts/${this.PlayerUrl(profileId)}` });
        });
    }
    Profile(profileId, gameType, game) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.AuthenticatedRequest({ url: `/stats/cod/v1/title/${game}/${this.PlayerUrl(profileId)}/profile/type/${gameType}` });
        });
    }
    MatchEvents(matchId, game) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.GenericRequest({ url: `/ce/v1/title/${game}/platform/battle/match/${matchId}/matchMapEvents` });
        });
    }
    MatchDetails(matchId, gameType, game) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.GenericRequest({ url: `/crm/cod/v2/title/${game}/platform/battle/fullMatch/${gameType}/${matchId}/it` });
        });
    }
    MatchHistory(profileId, gameType, game, start = 0, next = 0, limit = 20) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.AuthenticatedRequest({ url: `/crm/cod/v2/title/${game}/${this.PlayerUrl(profileId)}/matches/${gameType}/start/${start}/end/${next}/details?limit=${limit}` });
        });
    }
    MatchSummary(match, game) {
        return __awaiter(this, void 0, void 0, function* () {
            const playerUrl = this.PlayerUrl({ unoId: match.player.uno });
            const endThreshold = (Number(match.utcEndSeconds) + 25) * 1000;
            const startThreshold = (Number(match.utcStartSeconds) - 25) * 1000;
            return this.AuthenticatedRequest({ url: `/crm/cod/v2/title/${game}/${playerUrl}/matches/${match.gameType}/start/${startThreshold}/end/${endThreshold}/details` });
        });
    }
    Authorize(email, password, useTokens = true) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const initializeUrl = 'https://s.activision.com/activision/login';
            this.logger(`[>] API.CallOfDuty: ${initializeUrl}`);
            const initialPageLoad = yield axios_1.default.get(initializeUrl, { timeout: 5000 }).catch(() => { throw 'activision timeout; please retry'; });
            const xsrf = (_a = initialPageLoad === null || initialPageLoad === void 0 ? void 0 : initialPageLoad.headers['set-cookie'].find((cookie) => cookie.includes('XSRF-TOKEN='))) === null || _a === void 0 ? void 0 : _a.replace(/^XSRF-TOKEN=([^;]+);.*$/, '$1');
            if (!xsrf) {
                throw 'activision failure; missing token';
            }
            const { headers } = yield this.AnonymousRequest({
                method: 'POST',
                url: 'https://s.activision.com/do_login?new_SiteId=activision',
                headers: {
                    'Cookie': `XSRF-TOKEN=${xsrf}; new_SiteId=activision;`,
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                form: {
                    username: email,
                    password,
                    remember_me: 'true',
                    _csrf: xsrf
                }
            });
            if (headers.location.toLowerCase().includes('captcha')) {
                throw 'captcha required';
            }
            try {
                const atkn = (_b = headers['set-cookie'].find((cookie) => cookie.includes('atkn='))) === null || _b === void 0 ? void 0 : _b.replace(/^atkn=([^;]+);.*$/, '$1');
                const sso = (_c = headers['set-cookie'].find((cookie) => cookie.includes('ACT_SSO_COOKIE='))) === null || _c === void 0 ? void 0 : _c.replace(/^ACT_SSO_COOKIE=([^;]+);.*$/, '$1');
                if (!atkn || !sso)
                    throw 'invalid credentials';
                if (useTokens) {
                    this.UseTokens({ xsrf, atkn, sso });
                }
                return { xsrf, atkn, sso };
            }
            catch (e) {
                throw 'invalid credentials';
            }
        });
    }
    PlayerUrl(profileId) {
        const { unoId } = profileId;
        const { username, platform } = profileId;
        const acctIdentifier = unoId ? unoId : username;
        const platformSegment = unoId ? 'uno/uno' : `${platform}/gamer`;
        return `platform/${platformSegment}/${encodeURIComponent(acctIdentifier)}`;
    }
    AnonymousRequest(cfg) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => deprecatedRequest(cfg, (err, res) => err ? reject(err) : resolve(res)));
        });
    }
    GenericRequest(config, headers) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestConfig = Object.assign({ method: 'GET', baseURL: 'https://my.callofduty.com/api/papi-client', headers: Object.assign({ 'Cache-Control': 'no-cache' }, headers) }, config);
            this.logger(`[>] API.CallOfDuty: ${requestConfig.baseURL}${requestConfig.url}`);
            const { data: res, status } = yield axios_1.default(requestConfig);
            if (status !== 200 || res.status !== 'success') {
                this.logger('[!] API Error:', res.data.message.replace('Not permitted: ', ''), res);
                throw res.data.message.replace('Not permitted: ', '');
            }
            return res.data;
        });
    }
    AuthenticatedRequest(config) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.tokens.xsrf || !this.tokens.atkn || !this.tokens.sso) {
                throw new Error('Missing tokens for Call of Duty API');
            }
            const headers = {
                'X-XSRF-TOKEN': this.tokens.xsrf,
                'X-CSRF-TOKEN': '3844e7b2-ac07-4c97-8c72-0fa9f43fdd26',
            };
            const cookieStr = `atkn=${this.tokens.atkn};`
                + `ACT_SSO_COOKIE=${this.tokens.sso};`
                + `API_CSRF_TOKEN=3844e7b2-ac07-4c97-8c72-0fa9f43fdd26;`;
            return this.GenericRequest(config, Object.assign({ Cookie: cookieStr }, headers));
        });
    }
    ParsedAuthenticatedRequest(config, parser) {
        return __awaiter(this, void 0, void 0, function* () {
            return parser(yield this.AuthenticatedRequest(config));
        });
    }
}
exports.default = default_1;
//# sourceMappingURL=index.js.map