import { AxiosRequestConfig } from 'axios';
import * as Schema from '@callofduty/types';
export default class {
    protected readonly tokens: Schema.Tokens;
    protected readonly logger: Function;
    constructor(tokens?: Schema.Tokens, logger?: Function);
    UseTokens({ sso, atkn, xsrf }: Schema.Tokens): this;
    Identity(): Promise<Schema.Routes.Identity>;
    UserInfo(): Promise<Schema.Routes.UserInfo>;
    Friends(): Promise<Schema.Routes.Friends>;
    FriendAction(unoId: string, action: 'invite' | 'uninvite' | 'remove' | 'block' | 'unblock'): Promise<any>;
    FriendProfiles(profileId: Schema.ProfileId, game: Schema.Game, gameType: Schema.GameType): Promise<Schema.Routes.Profile[]>;
    SearchVisibility(visibility: 'all' | 'none' | 'friends', platform: Schema.Platform): Promise<any>;
    ProfileVisibility(visibility: 'all' | 'none' | 'friends' | 'friends_tourneys', platform: Schema.Platform): Promise<any>;
    Accounts(profileId: Schema.ProfileId): Promise<Schema.Routes.Accounts>;
    Profile(profileId: Schema.ProfileId, gameType: Schema.GameType, game: Schema.Game): Promise<Schema.Routes.Profile>;
    MatchEvents(matchId: string, game: Schema.Game): Promise<Schema.Routes.MatchEvents>;
    MatchDetails(matchId: string, gameType: Schema.GameType, game: Schema.Game): Promise<Schema.Routes.MatchDetails>;
    MatchHistory(profileId: Schema.ProfileId, gameType: Schema.GameType, game: Schema.Game, next?: number, limit?: number): Promise<Schema.Routes.MatchHistory>;
    MatchSummary(match: Schema.Match, game: Schema.Game): Promise<Schema.Routes.MatchHistory>;
    Authorize(email: string, password: string, useTokens?: boolean): Promise<{
        xsrf: string;
        atkn: string;
        sso: string;
    }>;
    protected PlayerUrl(profileId: Schema.ProfileId): string;
    protected AnonymousRequest(cfg: any): Promise<any>;
    protected GenericRequest(config: Partial<AxiosRequestConfig>, headers?: any): Promise<any>;
    protected AuthenticatedRequest(config: Partial<AxiosRequestConfig>): Promise<any>;
    protected ParsedAuthenticatedRequest(config: Partial<AxiosRequestConfig>, parser: Function): Promise<any>;
}
